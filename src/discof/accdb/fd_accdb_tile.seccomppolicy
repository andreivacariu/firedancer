# logfile_fd: It can be disabled by configuration, but typically tiles
#             will open a log file on boot and write all messages there.
#
# accounts_fd: The accounts database writes to a single file on disk to
#              store account data as not all of can fit in memory.
unsigned int logfile_fd, unsigned int accounts_fd

# logging: all log messages are written to a file and/or pipe
#
# 'WARNING' and above are written to the STDERR pipe, while all
# messages are always written to the log file.
#
# arg 0 is the file descriptor to write to.  The boot process ensures
# that descriptor 2 is always STDERR.
write: (or (eq (arg 0) 2)
           (eq (arg 0) logfile_fd))

# logging: 'WARNING' and above fsync the logfile to disk immediately
#
# arg 0 is the file descriptor to fsync.
fsync: (eq (arg 0) logfile_fd)

# accounts database: read from the disk
#
# The accounts database needs to read from the disk to retrieve account
# data that is not in the hot cache.
pread64: (eq (arg 0) accounts_fd)

# accounts database: write to the disk
#
# The accounts database needs to write to the disk to update account
# data.
pwrite64: (eq (arg 0) accounts_fd)

# accounts database: allocate more space from the disk
#
# The accounts database allocates more space from the underlying storage
# device in 1GiB chunks, as it runs out.
fallocate: (and (eq (arg 0) accounts_fd)
                (eq (arg 1) 0)
                (eq (arg 3) 1073741824))

# accounts database: move accounts around during compaction
#
# The accounts database compacts parts of the underlying file once they
# are fragmented (sparse).  It quickly moves these file parts in kernel
# space without any user space copies using copy_file_range(2).
copy_file_range: (and (eq (arg 0) accounts_fd)
                      (eq (arg 2) accounts_fd)
                      (eq (arg 5) 0))
